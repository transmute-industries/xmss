import { generate, sign, verify } from '../src/index';

const message = Buffer.from('hello');
const signature =
  'AAAAACfWVhfeVWef_IWzVKzygmklRXnh1JBGHopZvnYoJpX0f5iS5JSimerFRlj2ghpYp1rfx6CCOAhUVT3gr4lzfn6aeX4G1Q1IvWjIQYwldFOhjMIp97RjfJYK9DekgdXaHaO5Z3zyz2cKhwxobQg9xGBOs4hzu1PhJ5_xzJrcQrI3-N6tROsjKzcJMZU42hK5Z3l9x1VzqRrtzlBbRfpKZV1UAmGk-T21icMD0mEB2VfmphxShdv3SzqJh2rh9A5Qoz8htS43uUO4uXx7QBiql_waZKFVGuSnqKRW-cIqRsE22G7OyxvXvK0267NTUuz5m_DytNcJMzS4xd1FSpJV2wZN8K5ZawnWEPMvH2fmOpCfpJQgfH4ZnUDXIFVXngg5Jc7ztTNlgwbg02tSCU4wC6vzQ9E6AX8AYs7t6BJbuRXouKfn1L6QvGqlkPGVPwp98y6mVJKb8YDONFYVEA2QEt7CLoPdWL--Q77glHeTuAvXQB0ZO69laYkpSVDH1GLzADRlEokVUGFBx6XWsYvGuxtvKETUe3-JSVRh0WmECdV6lg-AdHsWXybqmsqKFBgjDZZUorXgzj8UiUASQrRPmj2joASXbQ9zxhFUzIT-D-HBT046dromVJjUz8OkHSgSNqhLKgVPE2DYe9fmg33uHXlDZtX2kIDM-5UFU6AQ1xoPoLAHxD6_MezR0J7uSIpE53qQdRFY_0NpDhtj3iV3HcwKWAFYSCRep5ZGE6P-pcddztEwZ_fB6dowIeqTlIBxBeex1DvW9b9ZYvnfPotCZM74kG3BdK6E1nDS23gWhxSUlOVhkJnHwUD8x8LnhpXEcgmp8Na_31cm5KeEGCbXEWnY5S1PkrFebA9jc023EjTMDrmw_dRkbI8RSizryYkDYdx8fkxbUEukYFik2TvWu7y2Vn_GT7tmdNYISNLMqTITjakJZsdMCyFPwf2pLmFNi7nggLFRT0ZBumgcI8h_ueMEI2OqKUYUmTZYa_l8mE3lhkWFbI4WFUUooD7uLd_VKiFZCGW_4yr2EwHgoDO1GPXGS882ckddXl0KUrsVhO-1nokKOqzz-OcJ_NMX5IGeEm6HnagwEnR5ZIwSEqS-KM1Xm4jozGbxmbEPYrxhw-5nNPaAAR8z657GAMJbWNv92TFXA2g4jtUaRPkX4aNwjAHcRkQQiixXv8vrro2gYx4qyMh9yP_HtajkDgse1NJRQOOIH_-dIAjBm8t5IpfWHDDbvldzcfqi0A3pj8USyRbbrU9QzdZAqJXQrgyzt50RuraceN_aH2S39tagDzoMrzQbIfV6p7WcG59O6kPsgmyoKo7tS3ngcTGF1DVc2rJRGZ2v3Zd4_X6mL33G7TeCIBcbD8jKfehRGOqON-bY1hSjvcjeZBmUucsXCUf0g6Cb54UtHkpWTqx23CDP3edfV6oVVrm6baMl5zDdWl15729TnBmuiuJ06_-XY6fp4_1k2OAJf3HfraCpSgw0Cy3wDwZAVUB4_7axvxYtpT6GeAQqBisW2-4Sk9gbw2bF4yGHIzbaEWFPW82-OaCiaxpGxB9RHWZMJKJcGwuo7ZY3NFkZkD2YdELldl0nduM0x5luXiYPqvpwee7uxPoo1aM13AXfTZGhh_BZGe1Fk9meCUPIwmZgCmqHaLpB2TS9EZp31EDqfykf3jzaWraCUF06YlG-qQngr_z-Zhm1b6hertb-u7YHxo9Um3VmlV9GjLl20YmbhS3lmEQJuJGPH3b1E3g8QrOqIJzOBDzeAvUjussRapm2UKDk2jSlZ46VCpo05Pqs09RNlT0KVrcVpNoSHAVWOFXO0LCrE09U3KSEQIAS7edHqhsCI-Fu57AQxIExpIHpmERL8fMl_6c4CslDq0sXlFB_njPeCLj217_P7eaN25ppMy079VHQZ5BlQ5D3rVFPKoS95nXpaGhWCUH2ab8W-MrK6tMtB6luUnLHXdmLJ0U9-ipRrYkaDR2ei5fxS71ThSfoD1CJg38lhj8-QsnGzM2P442BWR5tE7tNe58VA4_QdM1Nojvt-mj6t08UJ3658fBbooDMrPV40t3ESxK-R0T6K2JFfyUjSDRxLudp71ndwJeB_m0QxdwqZWx3S9ITdvxfRr7ZjMWdsImv2MhRSljvReZLu0nbHu9tVb1gJSucxuxj0RvwbHYEvpmuNm6ADBsnvexpQ1hRGyfd8fnLfmYW_SvKnJcMv64aLfWvFlHsajV7KB6J7yKx-DshCkv5p8BKqx0xYr__OVSewmo2SBvWOCxoMsDJATPouXBgnxdu7QBZQ5FFsjRYuLDIPxuNe6UGJfw-yASqwYYYduICjFokjZsViYlIm03e3BJ1KEPRqZbuCaXFsTAMUv506KmyR9N_iZdXONz4af_prgKmZJi0Kz9McDp9qiqTA1uFiVg5FTLkaJVHQCIaTv2BCDdeIbfykRs3wBIF_D1mnYoqzeodCKtGXH0PfWpNiNLVOOTE-VsX4m7YroCqSTfjIVFDWcIY9TTSusHYMyLjx2iX-YJmQ8DKvb_laieJwTzSEoRT6IKOYKlB0-3VA7KmNLHxrXsqFtga_mSF54-9daxpL76M0CM4_Eml05nbDa0nAAi53VNaUoNwyTbs2Xq7Ao8YQAiw2sT_7xFyAKEUPNzR2gk_aKOrYLWqIOALnY3zTsf0DtDS2vVAabnIMrRT69tfKXVvYN7sw8awgKh-9HIYpgz9HGOTjEW_7VkcZPVDE5MnUJX7z4nWt1AQNTJI5BLyLMUebvdip3wNiitQjAmG3aNADuDSfpL_CQH1y26GUTTeLO5eSW0WZLqaBOLaBMalHd5opEwup3K5tgS5wuB27nmQ8vc8zJMk5qIJuBzz6ugqoBEO5gBxbDS2l-ixNq4lwN5Y67RsAjIdo8grSwTWukt1wIMPQAEvEQZBqQMuAh2AZaUcl8JLKzKYdGA9eI8pJlhi-oxMIxU0SMz6k4AcgOw2zWrYjg7lAsk3zD8oVFAqiCBj7f5Cq7KHdG-h8UQhWn9CPXPoeRewMc5A6d9RjY8D7h84GZSqVffvQNBElJoTwANhW3H7PeriofiMZJtLZnqHi-LroCm-NxnrdyAPjC6l-kNlPsqRBZsSwRUHkek_BwZ63GQYDR5ecse5NqSXBqO7UE5v85Mj81qaA_CoWSzGq7JAXd5poB4TLZMu79W2_TLL2TmdZIq0C9e1wmGFXbX5SFVTA3cwyqVuaJG1wKLJy0-H1etBU6XHmiH8wHSm3ww9MmTT1JdShyFZrAu4sUi8BX8FqgSvbbfCDG7xjITYUaDE5PktMBTN-cbzwgJSksPLanaQx0m1EIOqRWhlbGxv';
const jwk = {
  kty: 'PQK',
  alg: 'xmss.SHA2_10_256',
  x: 'xZppyqOqWrydjvrxgOdpg-ORa8Y1IIsni32luKKn-fNP8oe1hznHgVU9UE5_KE1F9s4qDbbsqHGMxJfmW4Ca_g',
  d: 'AAAAAAA2btwAcWGxYjUfjThSrFJ3CYa4unKeuMarn-D0ppq4YCFyFgUJDG1SY3-N6aAEYEN-MDytMmFMkfPgkMUdRBRP8oe1hznHgVU9UE5_KE1F9s4qDbbsqHGMxJfmW4Ca_sWaacqjqlq8nY768YDnaYPjkWvGNSCLJ4t9pbiip_nz',
};

describe('generate', () => {
  it('should produce a key pair in jwk form', async () => {
    const jwk = await generate();
    expect(jwk.kty).toBe('PQK');
    expect(jwk.alg).toBe('xmss.SHA2_10_256');
    expect(jwk.x).toBeDefined();
    expect(jwk.d).toBeDefined();
  });
});

describe('sign', () => {
  it('should produce a signature from a jwk', async () => {
    const s = await sign(message, jwk);
    expect(s).toBe(signature);
  });
});

describe('verify', () => {
  it('should produce a verification from a jwk', async () => {
    const verified = await verify(message, signature, jwk);
    expect(verified).toBe(true);
  });
});
